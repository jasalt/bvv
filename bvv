#!/bin/bash

set -euox pipefail

# Global variables
VVV_ROOT=""
COMMAND=""
SUBCOMMAND=""

# Function to show usage
show_usage() {
    cat << EOF
Usage: bvv [OPTIONS] COMMAND [SUBCOMMAND]

OPTIONS:
  --vvv-root PATH    Path to VVV root directory
  -h, --help         Show this help message

COMMANDS:
  up                 Start VVV box with vagrant up
  ssh                SSH to Vagrant box in the current folder
  pull [db|wp-content]  Pull live site state (NOT IMPLEMENTED)

EXAMPLES:
  bvv up
  bvv ssh
  bvv pull
  bvv pull db
  bvv pull wp-content
EOF
}

# Function to find VVV root directory
find_vvv_root() {
    local current_dir="$PWD"

    # Check if directory has Vagrantfile and config/config.yml
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/Vagrantfile" && -f "$current_dir/config/config.yml" ]]; then
            echo "$current_dir"
            return 0
        fi
        current_dir=$(dirname "$current_dir")
    done

    return 1
}

# Function to initialize VVV_ROOT
init_vvv_root() {
    # Priority 1: --vvv-root command line argument (if passed)
    if [[ -n "$VVV_ROOT" ]]; then
        if [[ ! -f "$VVV_ROOT/Vagrantfile" || ! -f "$VVV_ROOT/config/config.yml" ]]; then
            echo "Error: Invalid VVV root directory: $VVV_ROOT" >&2
            echo "Directory must contain Vagrantfile and config/config.yml" >&2
            exit 1
        fi
        return 0
    fi

    # Priority 2: VVV_ROOT environment variable
    if [[ -n "${VVV_ROOT_DIR:-}" ]]; then
        VVV_ROOT="$VVV_ROOT_DIR"
        if [[ ! -f "$VVV_ROOT/Vagrantfile" || ! -f "$VVV_ROOT/config/config.yml" ]]; then
            echo "Error: Invalid VVV root directory from environment: $VVV_ROOT" >&2
            echo "Directory must contain Vagrantfile and config/config.yml" >&2
            exit 1
        fi
        return 0
    fi

    # Priority 3: Search from current directory upwards
    if VVV_ROOT=$(find_vvv_root); then
        return 0
    fi

    echo "Error: Could not find VVV root directory" >&2
    echo "Please specify with --vvv-root or set VVV_ROOT environment variable" >&2
    exit 1
}

# Function to get relative path for SSH
get_relative_path() {
    local current_dir="$PWD"
    local vvv_root="$1"

    # Check if we're inside VVV directory
    if [[ "$current_dir" == "$vvv_root"* ]]; then
        local rel_path="${current_dir#$vvv_root}"
        rel_path="${rel_path#/}"

        # Map to /srv/ path in vagrant box
        if [[ -n "$rel_path" ]]; then
            echo "/srv/$rel_path"
        else
            echo "/srv"
        fi
    else
        echo ""
    fi
}

# Command implementations
cmd_up() {
    echo "Starting VVV box..."
    cd "$VVV_ROOT"
    vagrant up
}
cmd_halt() {
    echo "Halting VVV box..."
    cd "$VVV_ROOT"
    vagrant halt
}

cmd_ssh() {
    local rel_path
    rel_path=$(get_relative_path "$VVV_ROOT")

    cd "$VVV_ROOT"

    if [[ -n "$rel_path" ]]; then
        echo "SSH to Vagrant box and cd to $rel_path"
        vagrant ssh -c "cd '$rel_path' && bash -l"
    else
        echo "SSH to Vagrant box"
        vagrant ssh
    fi
}

get_site_id() {
    local vvv_root="$1"
    local rel_path="${PWD##$vvv_root}"
    rel_path="${rel_path#/}"
    if [[ "${rel_path%%/*}" != "www" ]]; then
        echo >&2 "Error: Must be executed within $vvv_root/www"
        exit 1
    fi
    local site_id="${rel_path#www/}"
    site_id="${site_id%%/*}"
    echo "$site_id"
}

parse_site_config() {
    local site_id="$1"
    local config_file="$VVV_ROOT/config/config.yml"

    declare -A config_map=(
        [ssh_host]=".sites.\"$site_id\".pull.ssh_host"
        [www_path]=".sites.\"$site_id\".pull.www_path"
        [fqdn]=".sites.\"$site_id\".pull.fqdn"
        [dev_domain]=".sites.\"$site_id\".hosts[0]"
        [dump_path]=".sites.\"$site_id\".pull.dump_path // \"~\""
    )

    for key in "${!config_map[@]}"; do
        local value=$(yq -e -r "${config_map[$key]}" "$config_file" 2>/dev/null)
        [[ -z "$value" || "$value" == "null" ]] && {
            >&2 echo "Missing $key in config for site $site_id"
            return 1
        }
        declare -g "$key"="$value"
    done

    # Remove trailing slashes to prevent double slashes in paths
    www_path="${www_path%/}"
    dump_path="${dump_path%/}"

    return 0
}

sync_wp_content() {
    echo "Downloading PROD wp-content files..."
    local exclusions=()
    # Add exclusion logic here from config (skipped for brevity)
    rsync -av --progress --delete "${exclusions[@]}" "$ssh_host:$www_path/wp-content/" "$VVV_ROOT/www/$site_id/public_html/wp-content/"
}

sync_database() {
    local dump_file="wpdb.sql.gz"
    local vvv_box_path="/srv/www/$site_id/public_html"

    echo "Exporting PROD database"
	# NOTE dump_file moving not tested
    ssh "$ssh_host" "cd $www_path && wp db export ~/wpdb.sql && gzip -f ~/wpdb.sql && if [ '$dump_path' != '\$HOME' ] && [ '$dump_path' != '~' ]; then mv ~/wpdb.sql.gz $dump_path/$dump_file; fi"

    echo "Downloading database"
    rsync -av --progress --remove-source-files "$ssh_host:$dump_path/$dump_file" ./public_html/

    echo "Importing database into Vagrant"
    vagrant ssh -c "wp --path='$vvv_box_path' db drop --yes"
    vagrant ssh -c "wp --path='$vvv_box_path' db create"
    vagrant ssh -c "cd '$vvv_box_path'; pwd;
        gunzip -c '$dump_file' | wp db import -;
        rm '$dump_file'"
}

run_post_commands() {
    local vvv_box_path="/srv/www/$1/public_html"

    # Always run these commands:
    vagrant ssh -c "wp --path='$vvv_box_path' \\
        search-replace '//$fqdn' '//$dev_domain' \\
        && wp option update admin_email 'dev-email@flywheel.test' \\
        && wp cache flush"

    # Add conditional post-commands here
}

cmd_pull() {
    do_pull true true
}

cmd_pull_db() {
    do_pull false true
}

cmd_pull_wp_content() {
    do_pull true false
}

do_pull() {
    local sync_files=$1
    local sync_db=$2

    # Get current site ID
    local site_id=$(get_site_id "$VVV_ROOT")

    # Exit if we're not in a site directory
    [[ -z "$site_id" ]] && exit 1

    # Parse site configuration
    parse_site_config "$site_id" || exit 1

    # Determine vagrant box path
    local vvv_box_path="/srv/www/$site_id"

    # Perform requested sync operations
    pushd "$VVV_ROOT/www/$site_id" >/dev/null

    $sync_files && sync_wp_content
    $sync_db && sync_database

    # Run post-commands after DB sync
    $sync_db && run_post_commands "$site_id"

    popd >/dev/null
    echo "Sync complete! Access via http://$dev_domain"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --vvv-root)
            VVV_ROOT="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        up|halt|down|ssh|pull)
            COMMAND="$1"
            shift
            break
            ;;
        *)
            echo "Error: Unknown option or command: $1" >&2
            show_usage
            exit 1
            ;;
    esac
done

# Parse subcommand for pull
if [[ "$COMMAND" == "pull" && $# -gt 0 ]]; then
    case $1 in
        db|wp-content)
            SUBCOMMAND="$1"
            shift
            ;;
        *)
            echo "Error: Unknown pull subcommand: $1" >&2
            show_usage
            exit 1
            ;;
    esac
fi

# Validate command
if [[ -z "$COMMAND" ]]; then
    echo "Error: No command specified" >&2
    show_usage
    exit 1
fi

# Initialize VVV_ROOT
init_vvv_root

# Execute command
case "$COMMAND" in
    up)
        cmd_up
        ;;
    halt|down)
        cmd_halt
        ;;
    ssh)
        cmd_ssh
        ;;
    pull)
        if [[ "$SUBCOMMAND" == "db" ]]; then
            cmd_pull_db
        elif [[ "$SUBCOMMAND" == "wp-content" ]]; then
            cmd_pull_wp_content
        else
            cmd_pull
        fi
        ;;
esac
