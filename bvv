#!/bin/bash
# -*- mode: bash-ts-mode -*-

set -euox pipefail

# Global variables
VVV_ROOT=""
COMMAND=""
SUBCOMMAND=""
declare -g REPO_TYPE="" REPO_NAME=""  # For repo detection

# Function to show usage
show_usage() {
    cat << EOF
Usage: bvv [OPTIONS] COMMAND [SUBCOMMAND]

OPTIONS:
  --vvv-root PATH    Path to VVV root directory
  -h, --help         Show this help message

COMMANDS:
  up                 Start VVV box with vagrant up
  ssh                SSH to Vagrant box in the current folder
  pull [db|wp-content]  Pull live site state
  push [--all]       Deploy repository changes to remote
  logs [site-id]     View application logs with lnav

EXAMPLES:
  bvv up
  bvv ssh
  bvv pull
  bvv pull db
  bvv pull wp-content
  bvv push
  bvv push --all
EOF
}

# Function to find VVV root directory
find_vvv_root() {
    local current_dir="$PWD"

    # Check if directory has Vagrantfile and config/config.yml
    while [[ "$current_dir" != "/" ]]; do
        if [[ -f "$current_dir/Vagrantfile" && -f "$current_dir/config/config.yml" ]]; then
            echo "$current_dir"
            return 0
        fi
        current_dir=$(dirname "$current_dir")
    done

    return 1
}

# Function to initialize VVV_ROOT
init_vvv_root() {
    # Priority 1: --vvv-root command line argument (if passed)
    if [[ -n "$VVV_ROOT" ]]; then
        if [[ ! -f "$VVV_ROOT/Vagrantfile" || ! -f "$VVV_ROOT/config/config.yml" ]]; then
            echo "Error: Invalid VVV root directory: $VVV_ROOT" >&2
            echo "Directory must contain Vagrantfile and config/config.yml" >&2
            exit 1
        fi
        return 0
    fi

    # Priority 2: VVV_ROOT environment variable
    if [[ -n "${VVV_ROOT_DIR:-}" ]]; then
        VVV_ROOT="$VVV_ROOT_DIR"
        if [[ ! -f "$VVV_ROOT/Vagrantfile" || ! -f "$VVV_ROOT/config/config.yml" ]]; then
            echo "Error: Invalid VVV root directory from environment: $VVV_ROOT" >&2
            echo "Directory must contain Vagrantfile and config/config.yml" >&2
            exit 1
        fi
        return 0
    fi

    # Priority 3: Search from current directory upwards
    if VVV_ROOT=$(find_vvv_root); then
        return 0
    fi

    echo "Error: Could not find VVV root directory" >&2
    echo "Please specify with --vvv-root or set VVV_ROOT environment variable" >&2
    exit 1
}

# Function to get relative path for SSH
get_relative_path() {
    local current_dir="$PWD"
    local vvv_root="$1"

    # Check if we're inside VVV directory
    if [[ "$current_dir" == "$vvv_root"* ]]; then
        local rel_path="${current_dir#"$vvv_root"}"
        rel_path="${rel_path#/}"

        # Map to /srv/ path in vagrant box
        if [[ -n "$rel_path" ]]; then
            echo "/srv/$rel_path"
        else
            echo "/srv"
        fi
    else
        echo ""
    fi
}

# Command implementations
cmd_up() {
    echo "Starting VVV box..."
    cd "$VVV_ROOT"
    vagrant up
}
cmd_halt() {
    echo "Halting VVV box..."
    cd "$VVV_ROOT"
    vagrant halt
}

cmd_logs() {
    local site_id
    if [[ $# -gt 0 ]]; then
        # Use provided site-id if argument passed
        site_id="$1"
    else
        # Otherwise try to get it from current directory
        site_id=$(get_site_id "$VVV_ROOT")
        if [[ -z "$site_id" ]]; then
            echo "Error: No site_id found and not in a site directory" >&2
            exit 1
        fi
    fi

    # Get site root path
    local site_root="$VVV_ROOT/www/$site_id/public_html"

    if [[ ! -d "$site_root" ]]; then
        echo "Error: Site directory not found: $site_root" >&2
        exit 1
    fi

    # Find all relevant log files
    local debug_log="$site_root/wp-content/debug.log"
    local log_dir="$site_root/../log"
    local logs=()

    [[ -f "$debug_log" ]] && logs+=("$debug_log")
    [[ -d "$log_dir" ]] && logs+=("$log_dir"/*.log)

    if [[ ${#logs[@]} -eq 0 ]]; then
        echo "No log files found for site $site_id" >&2
        exit 1
    fi

    if ! command -v lnav >/dev/null 2>&1; then
        echo "Error: lnav is required but not installed" >&2
        echo "Install with: sudo apt-get install lnav" >&2
        exit 1
    fi

    lnav "${logs[@]}"
}

cmd_ssh() {
    local rel_path
    rel_path=$(get_relative_path "$VVV_ROOT")

    cd "$VVV_ROOT"

    if [[ -n "$rel_path" ]]; then
        echo "SSH to Vagrant box and cd to $rel_path"
        vagrant ssh -c "cd '$rel_path' && bash -l"
    else
        echo "SSH to Vagrant box"
        vagrant ssh
    fi
}

get_site_id() {
    local vvv_root="$1"
    local rel_path="${PWD##"$vvv_root"}"
    rel_path="${rel_path#/}"
    if [[ "${rel_path%%/*}" != "www" ]]; then
        echo >&2 "Error: Must be executed within $vvv_root/www"
        exit 1
    fi
    local site_id="${rel_path#www/}"
    site_id="${site_id%%/*}"
    echo "$site_id"
}

parse_site_config() {
    local site_id="$1"
    local config_file="$VVV_ROOT/config/config.yml"

	ssh_host=$(yq -e -r ".sites.\"$site_id\".bvv.ssh_host" "$config_file" 2>/dev/null)
	www_path=$(yq -e -r ".sites.\"$site_id\".bvv.www_path" "$config_file" 2>/dev/null)
	fqdns=()
	readarray -t fqdns < <(yq -e -r ".sites.\"$site_id\".bvv.fqdns[]?" "$config_file" 2>/dev/null || true)
	dev_domain=$(yq -e -r ".sites.\"$site_id\".hosts[0]" "$config_file" 2>/dev/null)
	dump_path=$(yq -e -r ".sites.\"$site_id\".bvv.dump_path // \"~\"" "$config_file" 2>/dev/null)

    # Remove trailing slashes to prevent double slashes in paths
    www_path="${www_path%/}"
    dump_path="${dump_path%/}"

    return 0
}

sync_wp_content() {
    echo "Downloading PROD wp-content files..."
    local exclusions=()

    # Read exclusions from config if they exist
    local config_file="$VVV_ROOT/config/config.yml"

    # Read plugin exclusions
    local plugin_exclusions
    plugin_exclusions=$(yq -e -r ".sites.\"$site_id\".bvv.\"repositories\".plugins[]?" "$config_file" 2>/dev/null || true)
    if [[ -n "$plugin_exclusions" ]]; then
        while IFS= read -r plugin; do
            [[ -n "$plugin" ]] && exclusions+=("--exclude" "plugins/$plugin")
        done <<< "$plugin_exclusions"
    fi

    # Read theme exclusions
    local theme_exclusions
    theme_exclusions=$(yq -e -r ".sites.\"$site_id\".bvv.\"repositories\".themes[]?" "$config_file" 2>/dev/null || true)
    if [[ -n "$theme_exclusions" ]]; then
        while IFS= read -r theme; do
            [[ -n "$theme" ]] && exclusions+=("--exclude" "themes/$theme")
        done <<< "$theme_exclusions"
    fi

    # Read other exclusions
    local other_exclusions
    other_exclusions=$(yq -e -r ".sites.\"$site_id\".bvv.\"wp-content-exclude\"[]" "$config_file" 2>/dev/null || true) # TODO modify according to latest config format where wp-content-exclude value itself is the array of exclude entries
    if [[ -n "$other_exclusions" ]]; then
        while IFS= read -r other; do
            [[ -n "$other" ]] && exclusions+=("--exclude" "$other")
        done <<< "$other_exclusions"
    fi

    # If no exclusions found in config, use defaults
    if [[ ${#exclusions[@]} -eq 0 ]]; then
		echo "No exclusions set"
    fi

    rsync -av --progress --delete "${exclusions[@]}" "$ssh_host:$www_path/wp-content/" "$VVV_ROOT/www/$site_id/public_html/wp-content/"
}

sync_database() {
    local dump_file="wpdb.sql.gz"
    local vvv_box_path="/srv/www/$site_id/public_html"

    echo "Exporting PROD database"
	# NOTE dump_file moving not tested
	# shellcheck disable=SC2029
    ssh "$ssh_host" "cd \"$www_path\" && wp db export ~/wpdb.sql && gzip -f ~/wpdb.sql && if [ \"$dump_path\" != '\$HOME' ] && [ \"$dump_path\" != '~' ]; then mv ~/wpdb.sql.gz \"$dump_path/$dump_file\"; fi"

    echo "Downloading database"
    rsync -av --progress --remove-source-files "$ssh_host:$dump_path/$dump_file" ./public_html/

    echo "Importing database into Vagrant"
    vagrant ssh -c "wp --path='$vvv_box_path' db drop --yes"
    vagrant ssh -c "wp --path='$vvv_box_path' db create"
    vagrant ssh -c "cd '$vvv_box_path'; pwd;
        gunzip -c '$dump_file' | wp db import -;
        rm '$dump_file'"
}

run_post_commands() {
    local vvv_box_path="/srv/www/$1/public_html"

	if [[ ${#fqdns[@]} -eq 0 ]]; then
		>&2 echo "Missing fqdns in config for site $site_id"
		return 1
	fi
	if [[ -z "$dev_domain" || "$dev_domain" == "null" ]]; then
		>&2 echo "Missing dev_domain in config for site $site_id"
		return 1
	fi

    # Always run these commands:
    local wp_cmd=""
    for fqdn in "${fqdns[@]}"; do
        [[ -z "$fqdn" ]] && continue
        wp_cmd+="wp --path='$vvv_box_path' search-replace '//$fqdn' '//$dev_domain' && "
    done

    vagrant ssh -c "${wp_cmd} \\
        wp --path='$vvv_box_path' option update admin_email 'dev-email@flywheel.test' \\
        && wp --path='$vvv_box_path' cache flush"

    # Execute any configured post-commands
    local config_file="$VVV_ROOT/config/config.yml"
    local post_commands=()
    if [[ -f "$config_file" ]]; then
        readarray -t post_commands < <(yq -e -r ".sites.\"$site_id\".bvv.\"post_commands\"[]? // \"\"" "$config_file" 2>/dev/null) || true
    
        for cmd in "${post_commands[@]}"; do
            [[ -n "$cmd" ]] || continue
            echo "Running post-command: $cmd"
            vagrant ssh -c "cd '$vvv_box_path' && $cmd"
        done

        # Handle special post-commands
        local create_admin
        create_admin=$(yq -e -r ".sites.\"$site_id\".bvv.create_admin // \"\"" "$config_file" 2>/dev/null) || true
        if [[ "$create_admin" == "true" ]]; then
            echo "Creating admin user"
            vagrant ssh -c "cd '$vvv_box_path' && wp user create admin dev-email@flywheel.test --role=administrator --user_pass=password --skip-plugins && wp user meta update admin locale en_US"
        fi

        local deactivate_plugins=()
        readarray -t deactivate_plugins < <(yq -e -r ".sites.\"$site_id\".bvv.deactivate_plugins[]? // \"\"" "$config_file" 2>/dev/null) || true
        for plugin in "${deactivate_plugins[@]}"; do
            [[ -n "$plugin" ]] || continue
            echo "Deactivating plugin: $plugin"
            vagrant ssh -c "cd '$vvv_box_path' && wp plugin deactivate '$plugin'"
        done
    fi
}

cmd_pull() {
    do_pull true true
}

cmd_pull_db() {
    do_pull false true
}

cmd_pull_wp_content() {
    do_pull true false
}

do_pull() {
    local sync_files=$1
    local sync_db=$2

    # Get current site ID
    local site_id
    site_id=$(get_site_id "$VVV_ROOT")

    # Exit if we're not in a site directory
    [[ -z "$site_id" ]] && exit 1

    # Parse and validate site configuration
    parse_site_config "$site_id" || exit 1
    if [[ -z "$www_path" || "$www_path" == "null" ]]; then
        echo "Error: Missing or invalid www_path in config for site $site_id" >&2
        exit 1
    fi

    # Determine vagrant box path
    local vvv_box_path="/srv/www/$site_id"

    # Perform requested sync operations
    pushd "$VVV_ROOT/www/$site_id" >/dev/null

    $sync_files && sync_wp_content
    $sync_db && sync_database

    # Run post-commands after DB sync
    $sync_db && run_post_commands "$site_id"

    popd >/dev/null
    echo "Sync complete! Access via http://$dev_domain"
}

cmd_push() {
    local push_all_flag="$1"
    local site_id
    local config_file="$VVV_ROOT/config/config.yml"

    # Get current site ID if we're in a site directory
    site_id=$(get_site_id "$VVV_ROOT")
    [[ -z "$site_id" ]] && {
        echo "Error: Not in a site directory" >&2
        exit 1
    }

    if [[ -n "$push_all_flag" ]]; then
        # Push all registered repositories
        echo "Deploying all repositories for site $site_id"

        # Get plugin repositories
        readarray -t plugins < <(yq -e -r ".sites.\"$site_id\".bvv.\"repositories\".plugins[]?" "$config_file" 2>/dev/null)
        for plugin in "${plugins[@]}"; do
            [[ -n "$plugin" ]] || continue
            push_single_repository "$site_id" "plugins" "$plugin"
        done

        # Get theme repositories
        readarray -t themes < <(yq -e -r ".sites.\"$site_id\".bvv.\"repositories\".themes[]?" "$config_file" 2>/dev/null)
        for theme in "${themes[@]}"; do
            [[ -n "$theme" ]] || continue
            push_single_repository "$site_id" "themes" "$theme"
        done

    else
        # Push single repository
        if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            # If not in a git repo but in site directory, push all repos
            cmd_push "true"
            return
        fi

        # Get repository type and name from current path
        local repo_path
        local repo_type
        local repo_name
        get_repo_info "$site_id"

        if [[ -z "$repo_type" || -z "$repo_name" ]]; then
            # If we can't determine repo but are in site directory, push all repos
            cmd_push "true"
            return
        fi

        push_single_repository "$site_id" "$repo_type" "$repo_name"
    fi
}

get_repo_info() {
    local site_id="$1"
    local site_path="$VVV_ROOT/www/$site_id"

    # Check if we're inside the site directory
    if [[ "$PWD" != "$site_path/"* ]]; then
        echo "Error: Must be inside a site directory ($site_path)" >&2
        return 1
    fi

    # Get path relative to site root
    local rel_path="${PWD#"$site_path/"}"
    IFS='/' read -r _ _ repo_type repo_name _ <<< "$rel_path"

    # Handle cases:
    if [[ "$rel_path" =~ ^public_html/wp-content/(plugins|themes)/[^/]+$ ]]; then
        REPO_TYPE="$repo_type"
        REPO_NAME="$repo_name"
        return 0
    elif [[ "$rel_path" =~ ^public_html/wp-content/(plugins|themes)[^/]*$ && -d "$site_path/public_html/wp-content/$repo_type" ]]; then
        # Handle direct plugin/theme directory
        local base
        base=$(basename "$PWD")
        if [[ -d "$site_path/public_html/wp-content/$repo_type/$base" ]]; then
			# shellcheck disable=SC2034
            REPO_TYPE="$repo_type"
			# shellcheck disable=SC2034
            REPO_NAME="$base"
            return 0
        fi
    elif [[ "$rel_path" =~ ^public_html ]]; then
        # We're in public_html but not in a specific repo - this is valid for push all
        return 0
    fi

    return 1
}

push_single_repository() {
    local site_id="$1"
    local repo_type="$2"
    local repo_name="$3"

    # Parse and validate configuration
    parse_site_config "$site_id" || exit 1
    if [[ -z "$www_path" || "$www_path" == "null" ]]; then
        echo "Error: Missing or invalid www_path in config for site $site_id" >&2
        exit 1
    fi

    # Confirm the repo exists locally
    local repo_path="$VVV_ROOT/www/$site_id/public_html/wp-content/$repo_type/$repo_name"
    if [[ ! -d "$repo_path" ]]; then
        echo "Error: Repository not found: $repo_path" >&2
        exit 1
    fi

    # Push to git origin
    pushd "$repo_path" >/dev/null
    echo "Executing git push in $(pwd)"
    git push
    popd >/dev/null

    # Update on remote server
    local remote_path="$www_path/wp-content/$repo_type/$repo_name"
    echo "Executing git pull on remote server..."
    # Note: $remote_path expansion is intentional here to use the local value
	# shellcheck disable=SC2029
    ssh "$ssh_host" "cd \"$remote_path\" && git pull"
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --vvv-root)
            VVV_ROOT="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        up|halt|down|ssh|pull|push|logs)  # Added push here
            COMMAND="$1"
            shift
            break
            ;;
        *)
            echo "Error: Unknown option or command: $1" >&2
            show_usage
            exit 1
            ;;
    esac
done

# Initialize push_flag
push_flag=""

# Parse flags for push
if [[ $COMMAND == "push" && $# -gt 0 && $1 == "--all" ]]; then
    push_flag="--all"
    shift
fi

# Parse subcommand for pull
if [[ "$COMMAND" == "pull" && $# -gt 0 ]]; then
    case $1 in
        db|wp-content)
            SUBCOMMAND="$1"
            shift
            ;;
        *)
            echo "Error: Unknown pull subcommand: $1" >&2
            show_usage
            exit 1
            ;;
    esac
fi

# Validate command
if [[ -z "$COMMAND" ]]; then
    echo "Error: No command specified" >&2
    show_usage
    exit 1
fi

# Initialize VVV_ROOT
init_vvv_root

# Execute command
case "$COMMAND" in
    up)
        cmd_up
        ;;
    halt|down)
        cmd_halt
        ;;
    ssh)
        cmd_ssh
        ;;
    pull)
        if [[ "$SUBCOMMAND" == "db" ]]; then
            cmd_pull_db
        elif [[ "$SUBCOMMAND" == "wp-content" ]]; then
            cmd_pull_wp_content
        else
            cmd_pull
        fi
        ;;
    logs)
        cmd_logs "$@"
        ;;
    push)  # New push command handler
        cmd_push "$push_flag"
        ;;
esac
